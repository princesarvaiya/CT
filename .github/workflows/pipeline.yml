name: Deploy based on env
on:
    push: 
     branches: 
        - main

jobs: 
   
  
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read
    steps:
     - uses: actions/checkout@v3
     - name: Get branch name
       id: branch_name
       run: echo "::set-output name=branch_name::${{ github.ref }}"
     
     - name: Extract folder name
       run: |
        
        branch_name=${{ steps.branch_name.outputs.branch_name }}
        folder_name=${branch_name##*/}
        echo "Folder name: $folder_name"
     
   #  - name: reading values from shell
    #   run: ./source.sh
     #  shell: bas
     - name: AWS Login
       run: |
         export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
         export AWS_SECRET_ACCESS_KEY="CvBz1JNY3TrkClSe1vEiI3jmnxZSTF2PtO/vjLIx"
         export AWS_SESSION_TOKEN="IQoJb3JpZ2luX2VjEEYaCXVzLXdlc3QtMiJHMEUCIQD0XPL53FT+QLuOBUExJTENmmrCDTsp9QRQ79SLlh/LQQIgL1mOGPcFKYCcjmmfsLOlIe8uSYaYEAUPEfY/I6PLe1oq/AIIn///////////ARABGgwwODUzOTUyNDkzNzkiDIDPrP0q2ld/QvOtZyrQAqbFspX9OzAa9/VWFPMHjXEg5h1uzP1EjG62nuTo1C2cbDASPrB+JX9mh1TNYuzoUl/0BHsxas263tfIxQlxel4Rde6iB6XSpVcr+LxktfrQZycNbYs1t8KIEXuWXO7QqqeG4K05zv+9IFlSxHXEnZo+h9/RutERq4Qujj+TEpqo/QUvnWeK10RQBMN/OscT67bsHsHNrCUQvu8/AIWi0avKQNzD/Dp4MycEoOw4VobrXexzdwXncMUQb9M3yDjw9fSvCtrXd4h9Gcpw+MPL0TndYhz4MTuSY7PF2ybgT21oYnbfmFV002gT7+AtCFN7lL/brcXhLN4UUsCoW3AUN/NPW/xVSSzE86fTq6YoEjIGpikWfUUPnSbpshHwUzYY67F9MChhflQDwmk/Pg6kKmcRS98ilCuJxMIe1cysYkiJqk1QBqGuPkpq8s17zlDqsDCRk/mdBjqnAaU5RopUb3nXiBq9Xs4Jd4NzOtykJyP2h+o7xAUz5pNOOdX6doP2xk+sHs7EM7WgtchWTbyRDoDY4UMOounkX3Nv0SB6FEcIB4MIrgd1PX34Mq+Zot9/Q1Wk9fQv5+s5/omzv7o7HfpwgEj+w4ptY6XSbBMvgfjk2SnpVh4afN3R2YCw9t19FmHgMAE/LquvBRhPac4rn4mjJht5xAETAj3xQlPgvFgn"
         export AWS_REGION="us-east-1"
         aws eks update-kubeconfig --region us-east-1 --name myekscluster
     
     - name: Check if image already exists in ECR
       id: check-ecr-image
       run: |
        export REPOSITORY_NAME=${{ env.REPOSITORY_NAME }}
        export IMAGE_TAG=${{ env.IMAGE_TAG }}
        export IMAGE_NAME="${REPOSITORY_NAME}:${IMAGE_TAG}"
        #export ECR_REPOSITORY=${{ env.ECR_REPOSITORY }}
        if aws ecr describe-images --sample-repo --image-ids imageTag=${IMAGE_TAG} | grep "imageTag" ; then
          echo "Image ${IMAGE_NAME} already exists in ECR, skipping push"
          exit 78
        else
          echo "Image ${IMAGE_NAME} does not exist in ECR, proceeding with push"
        fi
        
     - name: Build and push Docker image
       if: steps.check-ecr-image.outputs.exit-code != 78
       run: |
      
        #Build the Docker imager
        docker build -t first:v1 .
        # Log in to ECR
        
        # Tag the image
        #docker tag $REPOSITORY_NAME:$IMAGE_TAG $ECR_REPOSITORY:$IMAGE_TAG
        # Push the image
        #docker push sample-repo:v1
     
         
         # cd $folder_name
         # helm upgrade ${{ secrets.HELM_NAME }} -f values.yaml -f deployment.yaml $folder_name/${{ secrets.HELM_NAME }}
     
     - name: Deploying to EKS.
       run: |
        #cd frontend
        kubectl apply -f template.yaml
        kubectl get pods
        
      
      
